---
version: '2.1'
services:
  # Can't use service elasticsearch=<num> for now due to named volumes
  elasticsearch1:
  # Equivalent to:
  # docker run --rm --cap-add=IPC_LOCK --ulimit memlock=-1:-1 --ulimit nofile=65536:65536 -t -P --memory="4g" -e "discovery.zen.minimum_master_nodes=${ES_NODE_COUNT}" -v esdata:/usr/share/elasticsearch/data docker.elastic.co/elasticsearch/elasticsearch:5.0.0-rc1
    build:
      context: build/elasticsearch
      args:
        ELASTIC_VERSION: "${ELASTIC_VERSION}"
        ES_DOWNLOAD_URL: "${ES_DOWNLOAD_URL}"
        ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
    cap_add:
      - IPC_LOCK
    environment:
      - discovery.zen.minimum_master_nodes=${ES_NODE_COUNT}
    image: "${VERSIONED_IMAGE}"
    mem_limit: 4g
    networks:
      esnet:
        aliases:
          - elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - esdata1:/usr/share/elasticsearch/data
  elasticsearch2:
    build:
      context: build/elasticsearch
      args:
        ELASTIC_VERSION: "${ELASTIC_VERSION}"
        ES_DOWNLOAD_URL: "${ES_DOWNLOAD_URL}"
        ES_JAVA_OPTS: "${ES_JAVA_OPTS}"
    cap_add:
      - IPC_LOCK
    environment:
      - discovery.zen.ping.unicast.hosts=elasticsearch1
      - discovery.zen.minimum_master_nodes=${ES_NODE_COUNT}
    image: "${VERSIONED_IMAGE}"
    mem_limit: 4g
    networks:
      - esnet
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - esdata2:/usr/share/elasticsearch/data
  tester:
    build:
      context: build/python
    command: py.test -p no:cacheprovider tests/test_xpack_basic_index_crud.py
    image: "tester:latest"
    networks:
      - esnet
    links:
      - elasticsearch1:elasticsearch
    volumes:
      - $PWD/tests:/home/testuser/tests:ro
    # Despite the python tester having a built-in healthcheck at tests/es_acceptance.py#wait_for_cluster_health
    # Using the dockerfile healthcheck extends this to other services without having to re-code a wait for health status in each
    # Note that this requires docker-compose.yml version 2.1, docker-compose>=1.11, docker>=1.13
    depends_on:
      elasticsearch1:
        condition: service_healthy

volumes:
  esdata1:
    driver: local
  esdata2:
    driver: local
networks:
  esnet:
    driver: bridge
